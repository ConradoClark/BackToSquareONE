using System;
using System.Collections.Generic;
using Licht.Impl.Orchestration;
using Licht.Unity.Objects;
using UnityEngine;

public class InvulnerabilityFrames : BaseGameObject
{
    [field: SerializeField]
    public Damageable Damageable { get; private set; }

    [field: SerializeField]
    public float InvulnerabilityTimeInSeconds { get; private set; }

    [field: SerializeField]
    public SpriteRenderer SpriteRenderer { get; private set; }

    protected override void OnEnable()
    {
        base.OnEnable();
        Damageable.OnAnyDamage += OnDamage;
    }

    private void OnDamage()
    {
        DefaultMachinery.AddUniqueMachine($"invulnerability_{gameObject.GetInstanceID()}",
            UniqueMachine.UniqueMachineBehaviour.Cancel, HandleInvulnerability());
    }

    private IEnumerable<IEnumerable<Action>> HandleInvulnerability()
    {
        Damageable.SetInvulnerability(true);
        DefaultMachinery.AddBasicMachine(Flash());
        yield return TimeYields.WaitSeconds(GameTimer, InvulnerabilityTimeInSeconds);
        Damageable.SetInvulnerability(false);
    }

    private IEnumerable<IEnumerable<Action>> Flash()
    {
        while (Damageable.IsInvulnerable)
        {
            SpriteRenderer.enabled = !SpriteRenderer.enabled;
            yield return TimeYields.WaitMilliseconds(GameTimer, 50);
        }

        SpriteRenderer.enabled = true;
    }
}
